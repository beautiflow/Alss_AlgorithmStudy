# -*- coding: utf-8 -*-
"""가장 긴 감소하는 부분 수열.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NZ0Oc0IwHJi46L9qW4cCch2Zts5-art4
"""

n = int(input())
p = list(map(int, input().split()))
dp = [0] * n # n개의 0으로 이루어진 리스트

for i in range(n): # 수열 내 모든 요소를 고려해 보아야 함
    for j in range(i): # i번째 항 vs i번째 이전의 항들
        if p[i]<p[j] and dp[i]<dp[j]: # 주어진 수열의 i번째 이전의 항(들)보다 i번째 항이 작을 때 + dp리스트의 i번째 이전의 항(들)보다 i번째 항이 작을 때
            dp[i]=dp[j] 
            # dp 리스트를 만든 이유는 부분 수열의 길이를 누적하여 저장해 놓기 위함이다.
            # 이때, 요소가 감소되는 조건을 만족한다면 이전까지 누적되어 오던 부분 수열의 길이 값을 가져온다
            # 최종적으로, 가장 큰 값을 가져오게 된다. 우리는 '가장 긴' 감소하는 부분 수열을 구하는게 목적이므로
    dp[i] += 1
    # 그리고 여기에 1을 더한다. because '감소하는 부분 수열'에 새로운 요소가 하나 추가되기 때문이다.
    # 여기서 dp의 핵심이 나온다. 이전의 요소 값을 가져다가 쓰는 것
print(max(dp))